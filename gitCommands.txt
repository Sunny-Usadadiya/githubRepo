       git - the stupid content tracker
       git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
       See gittutorial(7) to get started, then see giteveryday(7) for a useful minimum set of commands. The Git User’s Manual[1] has a more in-depth introduction.
       After you mastered the basic concepts, you can come back to this page to learn what commands Git offers. You can learn more about individual Git commands with "git help command". gitcli(7)
       A formatted and hyperlinked copy of the latest Git documentation can be viewed at https://git.github.io/htmldocs/git.html.
           Prints the Git suite version that the git program came from.
           Other options are available to control how the manual page is displayed. See git-help(1) for more information, because git --help ...  is converted internally into git help ....
           Run as if git was started in <path> instead of the current working directory. When multiple -C options are given, each subsequent non-absolute -C <path> is interpreted relative to the
           This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be made relative to the working directory caused by
               git --git-dir=a.git --work-tree=b -C c status
               git --git-dir=c/a.git --work-tree=c/b status
           Pass a configuration parameter to the command. The value given will override values from configuration files. The <name> is expected in the same format as listed by git config (subkeys
           Note that omitting the = in git -c foo.bar ...  is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a config file). Including the equals but with an empty
           value (like git -c foo.bar= ...) sets foo.bar to the empty string which git config --bool will convert to false.
           Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, git will print the current
       --git-dir=<path>
           variable and the core.worktree configuration variable (see core.worktree in git-config(1) for a more detailed discussion).
           Set the Git namespace. See gitnamespaces(7) for more details. Equivalent to setting the GIT_NAMESPACE environment variable.
           Do not use replacement refs to replace Git objects. See git-replace(1) for more information.
       git-add(1)
       git-am(1)
       git-archive(1)
       git-bisect(1)
       git-branch(1)
       git-bundle(1)
       git-checkout(1)
       git-cherry-pick(1)
       git-citool(1)
           Graphical alternative to git-commit.
       git-clean(1)
       git-clone(1)
       git-commit(1)
       git-describe(1)
       git-diff(1)
       git-fetch(1)
       git-format-patch(1)
       git-gc(1)
       git-grep(1)
       git-gui(1)
       git-init(1)
       git-log(1)
       git-merge(1)
       git-mv(1)
       git-notes(1)
       git-pull(1)
       git-push(1)
       git-rebase(1)
       git-reset(1)
       git-revert(1)
       git-rm(1)
       git-shortlog(1)
           Summarize git log output.
       git-show(1)
       git-stash(1)
       git-status(1)
       git-submodule(1)
       git-tag(1)
       git-worktree(1)
       gitk(1)
       git-config(1)
       git-fast-export(1)
       git-fast-import(1)
       git-filter-branch(1)
       git-mergetool(1)
       git-pack-refs(1)
       git-prune(1)
       git-reflog(1)
       git-remote(1)
       git-repack(1)
       git-replace(1)
       git-annotate(1)
       git-blame(1)
       git-cherry(1)
       git-count-objects(1)
       git-difftool(1)
       git-fsck(1)
       git-get-tar-commit-id(1)
           Extract commit ID from an archive created using git-archive.
       git-help(1)
       git-instaweb(1)
           Instantly browse your working repository in gitweb.
       git-merge-tree(1)
       git-rerere(1)
       git-rev-parse(1)
       git-show-branch(1)
       git-verify-commit(1)
       git-verify-tag(1)
       git-whatchanged(1)
       gitweb(1)
       git-archimport(1)
       git-cvsexportcommit(1)
       git-cvsimport(1)
       git-cvsserver(1)
       git-imap-send(1)
       git-p4(1)
       git-quiltimport(1)
       git-request-pull(1)
       git-send-email(1)
       git-svn(1)
       about git-update-index(1) and git-read-tree(1).
       git-apply(1)
       git-checkout-index(1)
       git-commit-tree(1)
       git-hash-object(1)
       git-index-pack(1)
       git-merge-file(1)
       git-merge-index(1)
       git-mktag(1)
       git-mktree(1)
       git-pack-objects(1)
       git-prune-packed(1)
       git-read-tree(1)
       git-symbolic-ref(1)
       git-unpack-objects(1)
       git-update-index(1)
       git-update-ref(1)
       git-write-tree(1)
       git-cat-file(1)
       git-diff-files(1)
       git-diff-index(1)
       git-diff-tree(1)
       git-for-each-ref(1)
       git-ls-files(1)
       git-ls-remote(1)
       git-ls-tree(1)
       git-merge-base(1)
       git-name-rev(1)
       git-pack-redundant(1)
       git-rev-list(1)
       git-show-index(1)
       git-show-ref(1)
       git-unpack-file(1)
       git-var(1)
       git-verify-pack(1)
       git-daemon(1)
       git-fetch-pack(1)
       git-http-backend(1)
       git-send-pack(1)
       git-update-server-info(1)
       git-http-fetch(1)
       git-http-push(1)
       git-parse-remote(1)
       git-receive-pack(1)
       git-shell(1)
       git-upload-archive(1)
           Send archive back to git-archive.
       git-upload-pack(1)
           Send objects packed back to git-fetch-pack.
       git-check-attr(1)
           Display gitattributes information.
       git-check-ignore(1)
           Debug gitignore / exclude files.
       git-check-mailmap(1)
       git-check-ref-format(1)
       git-column(1)
       git-credential(1)
       git-credential-cache(1)
       git-credential-store(1)
       git-fmt-merge-msg(1)
       git-interpret-trailers(1)
       git-mailinfo(1)
       git-mailsplit(1)
       git-merge-one-file(1)
           The standard helper program to use with git-merge-index.
       git-patch-id(1)
       git-sh-i18n(1)
       git-sh-setup(1)
       git-stripspace(1)
                   email = "gitster@pobox.com"
       Various commands read from the configuration file and adjust their operation accordingly. See git-config(1) for a list and more details about the configuration mechanism.
       For a more complete list of ways to spell object names, see "SPECIFYING REVISIONS" section in gitrevisions(7).
       Please see the gitrepository-layout(5) document.
       Read githooks(5) for more details about each hook.
       Please see gitglossary(7).
           This environment variable allows the specification of an index version for new repositories. It won’t affect existing index files. By default index file version 2 or 3 is used. See git-
           If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the repository. The --git-dir command-line option also sets this
           Set the Git namespace; see gitnamespaces(7) for details. The --namespace command-line option also sets this value.
           When run in a directory that does not have ".git" repository directory, Git tries to find such a directory in the parent directories to find the top of the working tree, but by default it
           $GIT_DIR. See gitrepository-layout(5) and git-worktree(1) for details. This variable has lower precedence than other path variables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY...
           see git-commit-tree(1)
           are the 40-hexdigit SHA-1 hashes,
           The file parameters can point at the user’s working file (e.g.  new-file in "git-diff-files"), /dev/null (e.g.  old-file when a new file is added), or a temporary file (e.g.  old-file in
           A number controlling the amount of output shown by the recursive merge strategy. Overrides merge.verbosity. See git-merge(1)
           This environment variable overrides $PAGER. If it is set to an empty string or to the value "cat", Git will not launch a pager. See also the core.pager option in git-config(1).
           This environment variable overrides $EDITOR and $VISUAL. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also git-var(1) and the core.editor
           option in git-config(1).
           If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system. The command-line
           parameters passed to the configured command are determined by the ssh variant. See ssh.variant option in git-config(1) for details.
           as command-line argument and read the password from its STDOUT. See also the core.askPass option in git-config(1).
           If this environment variable is set to 0, git will not prompt on the terminal (e.g., when asking for HTTP authentication).
           Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file. This environment variable can be used along with $HOME and $XDG_CONFIG_HOME to create a predictable
           environment for a picky script, or you can set it temporarily to avoid using a buggy /etc/gitconfig file while waiting for someone with sufficient permissions to fix it.
           If this environment variable is set to "1", then commands such as git blame (in incremental mode), git rev-list, git log, git check-attr and git check-ignore will force a flush of the
           Enables trace messages printing the .git, working tree and current working directory after Git has completed its setup phase. See GIT_TRACE for available trace output options.
           Enables a curl full trace dump of all incoming and outgoing data, including descriptive information, of the git transport protocol. This is similar to doing curl --trace-ascii on the
           Setting this variable to 1 will cause Git to treat all pathspecs literally, rather than as glob patterns. For example, running GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search for
           commits that touch the path *.c, not any paths that the glob *.c matches. You might want this if you are feeding literal paths to Git (e.g., paths previously given to you by git ls-tree,
           addition to the old and new values of the ref. A scripted Porcelain command can use set_reflog_action helper function in git-sh-setup to set its name to this variable when it is invoked
           If set to 1, include broken or badly named refs when iterating over lists of refs. In a normal, non-corrupted repository, this does nothing. However, enabling it may help git to detect
           and abort some operations in the presence of broken refs. Git sets this variable automatically when performing destructive operations like git-prune(1). You should not need to set it
           existing configuration). In other words, any protocol not mentioned will be disallowed (i.e., this is a whitelist, not a blacklist). See the description of protocol.allow in git-config(1)
           or for programs which feed potentially-untrusted URLS to git commands. See git-config(1) for more details.
           If set to 0, Git will complete any requested operation without performing any optional sub-operations that require taking a lock. For example, this will prevent git status from refreshing
           inherit them, possibly blocking regular Git operations). The primary intended use case is to use named pipes for communication (e.g.  \\.\pipe\my-git-stdin-123).
           If set to yes, print an ellipsis following an (abbreviated) SHA-1 value. This affects indications of detached HEADs (git-checkout(1)) and the raw diff output (git-diff(1)). Printing an
       More detail on the following is available from the Git concepts chapter of the user-manual[2] and gitcore-tutorial(7).
       A Git project normally consists of a working directory with a ".git" subdirectory at the top level. The .git directory contains, among other things, a compressed object database representing
       All objects are named by the SHA-1 hash of their contents, normally written as a string of 40 hex digits. Such names are globally unique. The entire history leading up to a commit can be
       The Git concepts chapter of the user-manual[2] and gitcore-tutorial(7) both provide introductions to the underlying Git architecture.
       See gitworkflows(7) for an overview of recommended workflows.
       Users migrating from CVS may also want to read gitcvs-migration(7).
       Git was started by Linus Torvalds, and is currently maintained by Junio C Hamano. Numerous contributions have come from the Git mailing list <git@vger.kernel.org[5]>.
       http://www.openhub.net/p/git/contributors/summary gives you a more complete list of contributors.
       If you have a clone of git.git itself, the output of git-shortlog(1) and git-blame(1) can show you the authors for specific parts of the project.
       Report bugs to the Git mailing list <git@vger.kernel.org[5]> where the development and maintenance is primarily done. You do not have to be subscribed to the list to send a message there.
       Issues which are security relevant should be disclosed privately to the Git Security mailing list <git-security@googlegroups.com[6]>.
       gittutorial(7), gittutorial-2(7), giteveryday(7), gitcvs-migration(7), gitglossary(7), gitcore-tutorial(7), gitcli(7), The Git User’s Manual[1], gitworkflows(7)
       Part of the git(1) suite
           file:///usr/share/doc/git/html/user-manual.html
           file:///usr/share/doc/git/html/user-manual.html#git-concepts
           file:///usr/share/doc/git/html/howto-index.html
           file:///usr/share/doc/git/html/technical/api-index.html
        5. git@vger.kernel.org
           mailto:git@vger.kernel.org
        6. git-security@googlegroups.com
           mailto:git-security@googlegroups.com
